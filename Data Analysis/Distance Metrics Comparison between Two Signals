import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import cosine

# Define two signals (example values)
x = np.array([1.2, 2.5, 3.1, 4.0, 5.6, 6.1, 7.3, 8.0, 9.2, 10.5])
y = np.array([1.1, 2.7, 3.0, 4.2, 5.5, 6.3, 7.1, 8.3, 9.0, 10.4])

# Normalize using Min-Max Scaling
x_norm = (x - x.min()) / (x.max() - x.min())
y_norm = (y - y.min()) / (y.max() - y.min())

# L1 Norm (Manhattan Distance)
def l1_norm(x, y):
    return np.sum(np.abs(x - y))

# L2 Norm (Euclidean Distance)
def l2_norm(x, y):
    return np.sqrt(np.sum((x - y) ** 2))

# L(infinite) Norm (Chebyshev Distance)
def linf_norm(x, y):
    return np.max(np.abs(x - y))

# Cosine Similarity
def cosine_similarity(x, y):
    return 1 - cosine(x, y)

# Minkowski Distance
def minkowski_distance(x, y, p):
    return np.sum(np.abs(x - y) ** p) ** (1 / p)

# write for p value
p = float(input("Enter the value of p for the Minkowski distance: "))

# Calculate distances
l1 = l1_norm(x_norm, y_norm)
l2 = l2_norm(x_norm, y_norm)
linf = linf_norm(x_norm, y_norm)
cos_sim = cosine_similarity(x_norm, y_norm)
minkowski_p = minkowski_distance(x_norm, y_norm, p)

# Display results
print(f"L1 Norm (Manhattan Distance): {l1:.4f}")
print(f"L2 Norm (Euclidean Distance): {l2:.4f}")
print(f"L(infinite) Norm (Chebyshev Distance): {linf:.4f}")
print(f"Cosine Similarity: {cos_sim:.4f}")
print(f"Minkowski Distance (p={p}): {minkowski_p:.4f}")

# Plotting the signals
plt.plot(x_norm, label='Signal X', marker='o')
plt.plot(y_norm, label='Signal Y', marker='x')
plt.title("Signals X and Y")
plt.legend()
plt.show()
